{"version":3,"sources":["components/ColorTile/ColorTile.js","containers/Colors/Colors.js","containers/Header/Header.js","components/Modal/Modal.js","values.js","colors.js","containers/Play/Play.js","containers/Auth/Auth.js","App.js","serviceWorker.js","index.js"],"names":["ColorTile_ColorTile","props","react_default","a","createElement","className","style","backgroundColor","id","whichOne","colors","onClick","e","colorTiles","index","length","push","key","header","textColor","headerColor","split","color","chosenColor","resetColors","triesLeft","Modal_Modal","points","react_router_dom","to","playAgain","DIFFICULTIES","minimumPoints","numberOfColors","similarColors","canLoadNewColors","COLOR_PATTERNS","RGB","HSL","HEX","MIN_POINTS","ENTRY_DIFFICULTY","MAX_TRIES","POINTS_ADDITION","BACKGROUND_COLOR","_factor","Math","floor","random","randomFactor","round","randomColorRGB","randomColor","colorPattern","values","hue","saturation","lightness","concat","map","toString","join","Error","similarColorForRGBHelper","rgb","slice","similarColorForHEX","hex","bigint","parseInt","hexToRgb","endsWith","Number","padStart","similarColor","substring","trim","similarColorForHSL","similarColorForRGB","colorsWithSimilar","numberOfSimilarColors","chosenOne","indexes","pop","console","log","getColorData","difficulty","apply","Object","toConsumableArray","Play","_useState","useState","_useState2","slicedToArray","setPoints","_useState3","_useState4","setDifficulty","_useState5","_useState6","setTriesLeft","_useState7","_useState8","colorData","setColorData","_useState9","_useState10","gameOver","setGameOver","onColorsClick","preventDefault","clickedIndex","target","newPoints","newDifficulty","oldDifficulty","gotCorrectAnswer","newColors","objectSpread","newTriesLeft","gotWrongAnswer","Header_Header","Colors_Colors","getGameOverModal","auth","App","react_router","path","exact","render","containers_Play_Play","component","Auth","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49e3e9c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ColorTile.css\";\r\n\r\nexport default props => (\r\n  <div\r\n    className=\"tile\"\r\n    style={{ backgroundColor: props.backgroundColor }}\r\n    id={props.whichOne}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport \"./Colors.css\";\r\n\r\nimport ColorTile from \"../../components/ColorTile/ColorTile\";\r\n\r\nconst colorTiles = colors => {\r\n  const colorTiles = [];\r\n  for (let index = 0; index < colors.length; index++) {\r\n    colorTiles.push(\r\n      <ColorTile\r\n        key={index + 1}\r\n        whichOne={index}\r\n        backgroundColor={colors[index]}\r\n      />\r\n    );\r\n  }\r\n  return colorTiles;\r\n};\r\n\r\nconst colors = props => {\r\n  return (\r\n    <div className=\"colors\" onClick={e => props.onClick(e)}>\r\n      {colorTiles(props.colors)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default colors;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst header = props => {\r\n  const dark = `hsl(0, 0%, 15%)`;\r\n  const light = `hsl(0, 0%, 95%)`;\r\n  const lightness = props.headerColor.split(\",\")[2].split(\"%\")[0];\r\n  const textColor = lightness < 45 ? light : dark;\r\n\r\n  return (\r\n    <div className=\"header\" style={{ backgroundColor: props.headerColor }}>\r\n      <h2 className=\"header__color\" style={{ color: textColor }}>\r\n        {props.chosenColor}\r\n      </h2>\r\n      <div className=\"header__buttons\">\r\n        {props.resetColors !== null ? ( // If props.resetColors isn't null, then load New Colors button\r\n          <button onClick={props.resetColors}>New Colors</button>\r\n        ) : null}\r\n      </div>\r\n      <p className=\"header__subtext\">Tries Left: {props.triesLeft}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Modal.css\";\r\n\r\nexport default props => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal__body\">\r\n        <p>Points: {props.points}</p>\r\n        <p>\r\n          <Link to=\"/login\">Login</Link> to save your score, and compete with\r\n          friends!\r\n        </p>\r\n      </div>\r\n      <div className=\"modal__overlay\" />\r\n      <div className=\"modal__overlay\" onClick={() => props.playAgain()} />\r\n    </div>\r\n  );\r\n};\r\n","export const MAX_HUE_VALUE = 360;\r\nexport const MAX_SATURATION_VALUE = 90;\r\nexport const MAX_LIGHTNESS_VALUE = 85;\r\n\r\nexport const MAX_RGB_VALUE = 200;\r\nexport const MIN_HSL_RGB_VALUE = 25;\r\n\r\nexport const DIFFICULTIES = [\r\n  {\r\n    // Difficulty 0\r\n    minimumPoints: 0,\r\n    numberOfColors: 3,\r\n    similarColors: 0,\r\n    headerColor: \"hsl(0, 0%, 20%)\", // Gray\r\n    canLoadNewColors: true\r\n  },\r\n  {\r\n    // Difficulty 1\r\n    minimumPoints: 50,\r\n    numberOfColors: 6,\r\n    similarColors: 1,\r\n    headerColor: \"hsl(0, 25%, 97%)\", // Green\r\n    canLoadNewColors: true\r\n  },\r\n  {\r\n    // Difficulty 2\r\n    minimumPoints: 100,\r\n    numberOfColors: 6,\r\n    similarColors: 2,\r\n    headerColor: \"hsl(0, 25%, 97%)\", // Blue\r\n    canLoadNewColors: false\r\n  },\r\n  {\r\n    // Difficulty 3\r\n    minimumPoints: 200,\r\n    numberOfColors: 9,\r\n    similarColors: 4,\r\n    headerColor: \"hsl(0, 25%, 97%)\", // Purple\r\n    canLoadNewColors: false\r\n  },\r\n  {\r\n    // Difficulty 4\r\n    minimumPoints: 350,\r\n    numberOfColors: 9,\r\n    similarColors: 5,\r\n    headerColor: \"hsl(0, 25%, 97%)\", // Gold\r\n    canLoadNewColors: false\r\n  }\r\n];\r\n\r\nexport const GAMEOVER_TEXT = \"GAMEOVER\";\r\n\r\nexport const COLOR_PATTERNS = {\r\n  RGB: \"RGB\",\r\n  HSL: \"HSL\",\r\n  HEX: \"HEX\"\r\n};\r\n\r\nexport const MIN_POINTS = 0;\r\nexport const ENTRY_DIFFICULTY = 0;\r\nexport const MAX_TRIES = 5;\r\n\r\nexport const POINTS_ADDITION = 10;\r\n\r\nexport const BACKGROUND_COLOR = \"hsl(0, 25%, 97%)\";\r\n","import * as values from \"./values\";\r\n\r\nconst _factor = Math.floor(Math.random() * 16) + 5; // between 5 - 20\r\nconst randomFactor = Math.round(Math.random()) ? _factor : -_factor;\r\n\r\nfunction hexToRgb(hex) {\r\n  const bigint = parseInt(hex.slice(1), 16);\r\n  const r = (bigint >> 16) & 255;\r\n  const g = (bigint >> 8) & 255;\r\n  const b = bigint & 255;\r\n\r\n  return [r, g, b];\r\n}\r\n\r\nconst randomColorRGB = () => {\r\n  const red =\r\n    Math.floor(\r\n      Math.random() * (values.MAX_RGB_VALUE - values.MIN_HSL_RGB_VALUE + 1)\r\n    ) + values.MIN_HSL_RGB_VALUE;\r\n  const green =\r\n    Math.floor(\r\n      Math.random() * (values.MAX_RGB_VALUE - values.MIN_HSL_RGB_VALUE + 1)\r\n    ) + values.MIN_HSL_RGB_VALUE;\r\n  const blue =\r\n    Math.floor(\r\n      Math.random() * (values.MAX_RGB_VALUE - values.MIN_HSL_RGB_VALUE + 1)\r\n    ) + values.MIN_HSL_RGB_VALUE;\r\n\r\n  return [red, green, blue];\r\n};\r\n\r\nconst randomColor = colorPattern => {\r\n  switch (colorPattern) {\r\n    case values.COLOR_PATTERNS.HSL:\r\n      const hue = Math.floor(Math.random() * values.MAX_HUE_VALUE) + 1;\r\n      const saturation =\r\n        Math.floor(\r\n          Math.random() *\r\n            (values.MAX_SATURATION_VALUE - values.MIN_HSL_RGB_VALUE + 1)\r\n        ) + values.MIN_HSL_RGB_VALUE;\r\n      const lightness =\r\n        Math.floor(\r\n          Math.random() *\r\n            (values.MAX_LIGHTNESS_VALUE - values.MIN_HSL_RGB_VALUE + 1)\r\n        ) + values.MIN_HSL_RGB_VALUE;\r\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`; // saturation and lightness is between\r\n    // MIN_HSL_RGB_VALUE and the corresponding MAX value\r\n    case values.COLOR_PATTERNS.RGB:\r\n      return `rgb(${randomColorRGB()})`;\r\n\r\n    case values.COLOR_PATTERNS.HEX:\r\n      const rgb = randomColorRGB();\r\n      return (\r\n        \"#\" +\r\n        rgb\r\n          .map(e => {\r\n            e = e.toString(16);\r\n            return e.length === 1 ? (e += \"0\") : e;\r\n          })\r\n          .join(\"\")\r\n      );\r\n    default:\r\n      throw new Error(\"Invalid color pattern\");\r\n  }\r\n};\r\n\r\nconst similarColorForHSL = color => {\r\n  return `hsl(${color\r\n    .substring(4) // removes 'hsl(' (at the front)\r\n    .slice(0, -1) // removes ')' (at the end)\r\n    .split(\",\") // ex: \"12, 25%, 3%\" => [12, 25%, 3%]\r\n    .map(e => {\r\n      if (e[e.length - 1] === \"%\") {\r\n        e = Number(e.slice(0, -1).trim());\r\n        e += randomFactor;\r\n        e = e.toString() + \"%\";\r\n      }\r\n      return e;\r\n    })\r\n    .join(\",\")})`;\r\n}; // joins the array and returns it\r\n\r\nconst similarColorForRGBHelper = rgb => {\r\n  rgb = rgb.map(e => `${e + randomFactor},`);\r\n  rgb[rgb.length - 1] = rgb[rgb.length - 1].slice(0, -1);\r\n  return rgb;\r\n};\r\n\r\nconst similarColorForRGB = color => {\r\n  return `rgb(${\r\n    similarColorForRGBHelper(\r\n      color\r\n        .substring(4) // removes 'rgb('\r\n        .slice(0, -1) // removes ')' at the end\r\n        .split(\",\")\r\n        .map(e => Number(e.trim()))\r\n    ).join(\"\") // split into red, green and blue // adds random factor into each and\r\n  })`; // returns in the rgb(#, #, #) format\r\n};\r\n\r\nconst similarColorForHEX = color =>\r\n  \"#\" +\r\n  similarColorForRGBHelper(hexToRgb(color))\r\n    .map(e => {\r\n      e = e.endsWith(\",\") ? e.slice(0, -1) : e;\r\n      return Number(e)\r\n        .toString(16)\r\n        .padStart(2, \"0\");\r\n    })\r\n    .join(\"\");\r\n\r\nconst similarColor = (color, colorPattern) => {\r\n  switch (colorPattern) {\r\n    case values.COLOR_PATTERNS.HSL:\r\n      return similarColorForHSL(color);\r\n    case values.COLOR_PATTERNS.RGB:\r\n      return similarColorForRGB(color);\r\n    case values.COLOR_PATTERNS.HEX:\r\n      return similarColorForHEX(color);\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst colorsWithSimilar = (\r\n  numberOfColors,\r\n  numberOfSimilarColors,\r\n  colorPattern,\r\n  chosenOne\r\n) => {\r\n  const colors = [];\r\n  const indexes = [];\r\n\r\n  for (let index = 0; index < numberOfColors; index++) {\r\n    colors.push(randomColor(colorPattern));\r\n    if (index !== chosenOne) {\r\n      indexes.push(index);\r\n    }\r\n  }\r\n  for (let index = 0; index < numberOfSimilarColors; index++) {\r\n    colors[\r\n      indexes.pop(Math.floor(Math.random() * indexes.length) + 1)\r\n    ] = similarColor(colors[chosenOne], colorPattern);\r\n  }\r\n\r\n  console.log(colors);\r\n  return colors;\r\n};\r\n\r\nexport function getColorData(difficulty, colorPattern) {\r\n  const numberOfColors = values.DIFFICULTIES[difficulty].numberOfColors;\r\n  const numberOfSimilarColors = values.DIFFICULTIES[difficulty].similarColors;\r\n\r\n  const colors = [];\r\n\r\n  const chosenOne = Math.floor(Math.random() * numberOfColors);\r\n\r\n  if (difficulty === 0) {\r\n    // for difficulty 1 (no intentional similar colors)\r\n    for (let index = 0; index < numberOfColors; index++) {\r\n      colors.push(randomColor(colorPattern));\r\n    }\r\n  } else {\r\n    colors.push(\r\n      ...colorsWithSimilar(\r\n        numberOfColors,\r\n        numberOfSimilarColors,\r\n        colorPattern,\r\n        chosenOne\r\n      )\r\n    );\r\n  }\r\n\r\n  return { colors, chosenOne };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./Play.css\";\r\n\r\nimport Colors from \"../Colors/Colors\";\r\nimport Header from \"../Header/Header\";\r\n\r\nimport Modal from \"../../components/Modal/Modal\";\r\n\r\nimport * as values from \"../../values\";\r\nimport { getColorData } from \"../../colors\";\r\n\r\nconst Play = props => {\r\n  // useState\r\n  const [points, setPoints] = useState(values.MIN_POINTS);\r\n  const [difficulty, setDifficulty] = useState(values.ENTRY_DIFFICULTY);\r\n  const [triesLeft, setTriesLeft] = useState(values.MAX_TRIES);\r\n  const [colorData, setColorData] = useState(\r\n    getColorData(difficulty, props.colorPattern)\r\n  );\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  function getGameOverModal() {\r\n    if (gameOver) {\r\n      const modal = <Modal points={points} playAgain={playAgain} />;\r\n      return modal;\r\n    }\r\n  }\r\n\r\n  function gotCorrectAnswer() {\r\n    let newPoints = points + values.POINTS_ADDITION;\r\n    let newDifficulty = 0;\r\n    const oldDifficulty = difficulty;\r\n\r\n    if (newPoints >= values.DIFFICULTIES[4].minimumPoints) {\r\n      newDifficulty = 4;\r\n    } else if (newPoints >= values.DIFFICULTIES[3].minimumPoints) {\r\n      newDifficulty = 3;\r\n    } else if (newPoints >= values.DIFFICULTIES[2].minimumPoints) {\r\n      newDifficulty = 2;\r\n    } else if (newPoints >= values.DIFFICULTIES[1].minimumPoints) {\r\n      newDifficulty = 1;\r\n    }\r\n\r\n    if (oldDifficulty !== newDifficulty) {\r\n      setTriesLeft(values.MAX_TRIES);\r\n    }\r\n\r\n    setPoints(newPoints);\r\n    setDifficulty(newDifficulty);\r\n\r\n    resetColors(newDifficulty);\r\n  }\r\n\r\n  function gotWrongAnswer(clickedIndex) {\r\n    if (colorData.colors[clickedIndex] !== values.BACKGROUND_COLOR) {\r\n      const newColors = [...colorData.colors];\r\n      newColors[clickedIndex] = values.BACKGROUND_COLOR;\r\n      setColorData({\r\n        ...colorData,\r\n        colors: newColors\r\n      });\r\n\r\n      const newTriesLeft = triesLeft - 1;\r\n      setTriesLeft(newTriesLeft);\r\n      if (newTriesLeft === 0) setGameOver(true);\r\n    }\r\n  }\r\n\r\n  function resetColors(difficulty) {\r\n    setColorData(getColorData(difficulty, props.colorPattern));\r\n  }\r\n\r\n  function playAgain() {\r\n    setGameOver(false);\r\n    setDifficulty(values.ENTRY_DIFFICULTY);\r\n    setPoints(values.MIN_POINTS);\r\n    setTriesLeft(values.MAX_TRIES);\r\n    setColorData(getColorData(values.ENTRY_DIFFICULTY, props.colorPattern));\r\n  }\r\n\r\n  function onColorsClick(e) {\r\n    if (triesLeft > 0) {\r\n      e.preventDefault();\r\n      const clickedIndex = Number(e.target.id);\r\n      if (e.target.className === \"tile\") {\r\n        if (clickedIndex === colorData.chosenOne) {\r\n          gotCorrectAnswer();\r\n        } else {\r\n          gotWrongAnswer(clickedIndex);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Play\">\r\n      <Header\r\n        headerColor={values.DIFFICULTIES[difficulty].headerColor}\r\n        chosenColor={colorData.colors[colorData.chosenOne]}\r\n        resetColors={() =>\r\n          values.DIFFICULTIES[difficulty].canLoadNewColors\r\n            ? resetColors(difficulty)\r\n            : null\r\n        }\r\n        triesLeft={triesLeft}\r\n      />\r\n      <Colors colors={colorData.colors} onClick={e => onColorsClick(e)} />\r\n      {getGameOverModal()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n","import React from \"react\";\r\nimport \"./Auth.css\";\r\n\r\nconst auth = props => {\r\n  return <div>Auth</div>;\r\n};\r\n\r\nexport default auth;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Play from \"./containers/Play/Play\";\nimport Auth from \"./containers/Auth/Auth\";\nimport { COLOR_PATTERNS } from \"./values\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route\n          path=\"/\"\n          exact\n          render={() => <Play colorPattern={COLOR_PATTERNS.HSL} />}\n        />\n        <Route path=\"/login\" component={Auth} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}